ドキュメンテーション認識合わせ
0. 課題
　・実装ロジックについては説明資料が存在するもの/しないもの、また存在する場合にもドキュメントが最新化されているか整理されていないため、新規着任者や引き継ぎを受ける場合においてコードを理解するのが難しい
　・また現在のチームメンバーにおいても各自の対応部分以外の実装内容への理解が深くは進んでおらず、引き継ぎが困難な状況
1. 目的
　・コード理解の促進
　　コード全体の詳細なロジックを把握することはドキュメントがない場合は困難。ドキュメンテーションを整理し更新状況を管理することで引き継ぎ時など効率的に理解を深められるようにする
　・知識の属人化の解消
　　ある程度の時間をかけて他人のコードを理解し、それをドキュメンテーション化することで、チーム内の知識の属人化を防ぐ
　・コードの品質向上
　　実装者、実装者以外の両方の視点でコードが何をしているのか、なぜそうするのかを明確にすることで、コード自体の改善点や最適化を明らかにする
　　他人のコードを読むことで、新しいテクニックやアプローチを学ぶ

 既存ドキュメントとの立ち位置の整理
　既存ドキュメント
　　


ドキュメンテーションの構成、範囲について
①主要な関数/メソッドの説明: スクリプトの中心的な機能を果たす主要な関数やメソッドを説明する。その機能、入力と出力、副作用（あれば）を明確にする
②複雑なロジックの説明: に複雑なアルゴリズムやロジック、またはプロジェクト全体に影響を与える重要な部分についての詳細な説明を記載する
③エラーハンドリングと特殊なケース: コードがどのようにエラーを処理し、特殊なケースを扱うのかを説明
④変更履歴: 変更履歴や更新履歴を追加することで、コードがどのように進化し、どのような修正が行われたのかを把握する
⑤既知の問題と未解決の課題: コードに関して既知の問題や制約事項・未解決の課題を明記する



レビューと更新のプロセス
・レビュープロセス
　レビュアー：基本チーム内メンバーで最低限実装者
　レビュー基準
　　明確さと理解の容易さ
　　技術的正確性
　　最新性（ドキュメント更新時点）



更新プロセス
　更新のトリガー
　　何がドキュメンテーションの更新を引き起こすのかを定義
　バージョニング
　　ドキュメンテーションのバージョンを追跡するための方針
　アーカイブ
　　古い、またはもはや必要とされないドキュメンテーションをどのように保管または廃棄するか










